namespace Algorithms.StringSearching
{
    public static class PrefixFunction
    {
        /// <summary>
        ///     Возвращает массив максимальных длин совпадающих суффикса и префикса для каждой подстроки исходной строки.
        /// </summary>
        public static int[] Naive(string text)
        {
            // Результаты значения префикс функции для каждого префикса строки.
            var resultArray = new int[text.Length];

            // Префикс-функция для строки из одного элемента по определению равна 0,
            // т.е. префикс не должен совпадать с самой строкой.
            resultArray[0] = 0;

            // Вычисляем значение префикс-функции для каждого префикса, начиная со второго, проходя по всем префиксам.
            // i на каждой итерации определяет длину(! не индекс) текущего префикса и соответственно сам префикс.
            for (int i = 2; i <= text.Length; i++)
            {
                int maxLength = 0;
                // Проходим по всем префиксам самого префикса!
                // j на каждой итерации определяем длину (! не индекс) префикса префикса.
                // j так же определяет суффикс префикса, т.к. мы знаем длину всего префикса.
                for (int j = 1; j < i; j++)
                {
                    bool isEqual = true;
                    // Сравниваем суффикс и префикс посимвольно, начиная с первого символа. 
                    for (int k = 0; k < j; k++)
                    {
                        if (text[k] != text[i - j + k])
                            isEqual = false;
                    }
                    // Если префикс равен суффиксу, проверяем не самая ли это длинная пара из встреченных ранее?
                    if (isEqual && j > maxLength)
                        maxLength = j;
                }

                resultArray[i - 1] = maxLength;
            }
            return resultArray;
        }
    }
}